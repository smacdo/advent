from collections.abc import Callable
from typing import Any, Iterator, overload

class Grid[T]:
    x_count: int
    y_count: int
    col_count: int
    row_count: int

    @overload
    def __init__(self, x_count: int, y_count: int, default: T) -> None: ...
    @overload
    def __init__(
        self, x_count: int, y_count: int, callable: Callable[[int, int], T]
    ) -> None: ...
    @overload
    def __init__(self, x_count: int, y_count: int, initial: list[T]) -> None: ...
    def __getitem__(self, index: Point) -> T: ...
    def __setitem__(self, index: Point, value: T) -> T: ...
    def __iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...

class Point:
    x: int
    y: int

    def clone(self) -> Point: ...
    def __init__(self, x: int, y: int) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: int) -> int: ...
    def __add__(self, other: Point) -> Point: ...
    def __sub__(self, other: Point) -> Point: ...
    def __mul__(self, other: int) -> Point: ...
    def __truediv__(self, other: int) -> Point: ...
    def __floordiv__(self, other: int) -> Point: ...
    def __mod__(self, other: int) -> Point: ...
    def __neg__(self) -> Point: ...
    def __abs__(self) -> Point: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class Vec2:
    x: float
    y: float

    def clone(self) -> Vec2: ...
    def dot(self) -> float: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def normalized(self) -> Vec2: ...
    def __init__(self, x: float, y: float) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> float: ...
    def __add__(self, other: Vec2) -> Vec2: ...
    def __sub__(self, other: Vec2) -> Vec2: ...
    def __mul__(self, other: float) -> Vec2: ...
    def __truediv__(self, other: float) -> Vec2: ...
    def __floordiv__(self, other: float) -> Vec2: ...
    def __neg__(self) -> Vec2: ...
    def __abs__(self) -> Vec2: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class Vec3:
    x: float
    y: float
    z: float

    def clone(self) -> Vec3: ...
    def dot(self) -> float: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def normalized(self) -> Vec3: ...
    def __init__(self, x: float, y: float, z: float) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> float: ...
    def __add__(self, other: Vec3) -> Vec3: ...
    def __sub__(self, other: Vec3) -> Vec3: ...
    def __mul__(self, other: float) -> Vec3: ...
    def __truediv__(self, other: float) -> Vec3: ...
    def __floordiv__(self, other: float) -> Vec3: ...
    def __neg__(self) -> Vec3: ...
    def __abs__(self) -> Vec3: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

@overload
def distance_squared(a: Vec2, b: Vec2): ...
@overload
def distance_squared(a: Vec3, b: Vec3): ...
@overload
def distance(a: Vec2, b: Vec2): ...
@overload
def distance(a: Vec3, b: Vec3): ...
